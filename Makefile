.PHONY: help build up down restart logs shell test lint clean

# Colors for output
BLUE=\033[0;34m
GREEN=\033[0;32m
YELLOW=\033[1;33m
RED=\033[0;31m
NC=\033[0m # No Color

# Docker Compose –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
COMPOSE=docker compose
WEB_SERVICE=web
REDIS_SERVICE=redis
SIDEKIQ_SERVICE=sidekiq

# Default target
help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
	@echo "$(BLUE)üê≥ Word Complexity API - Docker Commands$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-20s$(NC) %s\n", $$1, $$2}'

# ============================================================================
# üèó Build & Setup
# ============================================================================

build: ## –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑—ã
	@echo "$(BLUE)Building Docker images...$(NC)"
	$(COMPOSE) build
	@echo "$(GREEN)‚úÖ Build complete$(NC)"

setup: build ## –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫)
	@echo "$(BLUE)Setting up project for first time...$(NC)"
	$(COMPOSE) run --rm $(WEB_SERVICE) bundle install
	@echo "$(GREEN)‚úÖ Setup complete$(NC)"
	@echo "$(YELLOW)üí° Run 'make up' to start all services$(NC)"

# ============================================================================
# üöÄ Running Services
# ============================================================================

up: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "$(BLUE)Starting all services...$(NC)"
	$(COMPOSE) up -d
	@echo "$(GREEN)‚úÖ Services started$(NC)"
	@make status

up-build: ## –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å
	@echo "$(BLUE)Building and starting services...$(NC)"
	$(COMPOSE) up -d --build
	@echo "$(GREEN)‚úÖ Services built and started$(NC)"

down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "$(BLUE)Stopping all services...$(NC)"
	$(COMPOSE) down
	@echo "$(GREEN)‚úÖ Services stopped$(NC)"

restart: down up ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã

restart-web: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ web —Å–µ—Ä–≤–∏—Å
	@echo "$(BLUE)Restarting web service...$(NC)"
	$(COMPOSE) restart $(WEB_SERVICE)
	@echo "$(GREEN)‚úÖ Web service restarted$(NC)"

# ============================================================================
# üìä Status & Health
# ============================================================================

status: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(BLUE)Service status:$(NC)"
	$(COMPOSE) ps

health: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(BLUE)Checking service health...$(NC)"
	@echo "$(YELLOW)Redis:$(NC)"
	@$(COMPOSE) exec $(REDIS_SERVICE) redis-cli ping && echo "$(GREEN)‚úÖ Redis OK$(NC)" || echo "$(RED)‚ùå Redis FAILED$(NC)"
	@echo "$(YELLOW)Web:$(NC)"
	@curl -s http://localhost:3000/up > /dev/null && echo "$(GREEN)‚úÖ Rails OK$(NC)" || echo "$(RED)‚ùå Rails FAILED$(NC)"

# ============================================================================
# üß™ Testing & Development
# ============================================================================

test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
	@echo "$(BLUE)Running tests...$(NC)"
	$(COMPOSE) exec $(WEB_SERVICE) bundle exec rspec

test-setup: ## –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ä–µ–¥—É
	@echo "$(BLUE)Setting up test environment...$(NC)"
	$(COMPOSE) exec $(WEB_SERVICE) bundle install

test-coverage: ## –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
	@echo "$(BLUE)Running tests with coverage...$(NC)"
	$(COMPOSE) exec $(WEB_SERVICE) bash -c "COVERAGE=true bundle exec rspec"

lint: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ —á–µ—Ä–µ–∑ RuboCop
	@echo "$(BLUE)Running RuboCop...$(NC)"
	$(COMPOSE) exec $(WEB_SERVICE) bundle exec rubocop

lint-fix: ## –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ RuboCop
	@echo "$(BLUE)Auto-fixing with RuboCop...$(NC)"
	$(COMPOSE) exec $(WEB_SERVICE) bundle exec rubocop -a

# ============================================================================
# üîç Code Analysis & Quality
# ============================================================================

security: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Brakeman
	@echo "$(BLUE)Running Brakeman security analysis...$(NC)"
	$(COMPOSE) exec $(WEB_SERVICE) bundle exec brakeman -A -q

best-practices: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ Rails
	@echo "$(BLUE)Running Rails Best Practices...$(NC)"
	$(COMPOSE) exec $(WEB_SERVICE) bundle exec rails_best_practices .

code-smells: ## –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Reek
	@echo "$(BLUE)Running Reek code smell detection...$(NC)"
	$(COMPOSE) exec $(WEB_SERVICE) bundle exec reek app/ lib/

duplication: ## –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Flay
	@echo "$(BLUE)Running Flay duplication detection...$(NC)"
	$(COMPOSE) exec $(WEB_SERVICE) bundle exec flay app/ lib/

complexity: ## –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Flog
	@echo "$(BLUE)Running Flog complexity analysis...$(NC)"
	$(COMPOSE) exec $(WEB_SERVICE) bundle exec flog app/ lib/

vulnerabilities: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –≥–µ–º–∞—Ö
	@echo "$(BLUE)Running Bundle Audit...$(NC)"
	$(COMPOSE) exec $(WEB_SERVICE) bundle exec bundle-audit check

quality-all: security best-practices code-smells duplication complexity vulnerabilities ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
	@echo "$(GREEN)‚úÖ All code quality checks completed!$(NC)"

quality-summary: ## –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –∫–æ–¥–∞
	@echo "$(BLUE)üìä Code Quality Summary$(NC)"
	@echo "$(YELLOW)1. Security (Brakeman):$(NC)"
	@$(COMPOSE) exec $(WEB_SERVICE) bundle exec brakeman -A -q | grep -E "(No warnings found|warnings found)" || echo "Security check completed"
	@echo "$(YELLOW)2. Best Practices:$(NC)"
	@$(COMPOSE) exec $(WEB_SERVICE) bundle exec rails_best_practices . | grep -E "(Found.*warnings|No warnings)" || echo "Best practices check completed"
	@echo "$(YELLOW)3. Code Smells:$(NC)"
	@$(COMPOSE) exec $(WEB_SERVICE) bundle exec reek app/ lib/ | grep "total warnings" || echo "Code smells check completed"
	@echo "$(YELLOW)4. Duplication:$(NC)"
	@$(COMPOSE) exec $(WEB_SERVICE) bundle exec flay app/ lib/ | grep "Total score" || echo "Duplication check completed"
	@echo "$(YELLOW)5. Vulnerabilities:$(NC)"
	@$(COMPOSE) exec $(WEB_SERVICE) bundle exec bundle-audit check | grep -E "(No vulnerabilities|vulnerabilities found)" || echo "Vulnerability check completed"
	@echo "$(GREEN)‚úÖ Quality summary completed!$(NC)"

# ============================================================================
# üîç Development Tools
# ============================================================================

shell: ## –í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Rails
	$(COMPOSE) exec $(WEB_SERVICE) bash

console: ## Rails –∫–æ–Ω—Å–æ–ª—å
	$(COMPOSE) exec $(WEB_SERVICE) rails console

logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	$(COMPOSE) logs -f

logs-web: ## –õ–æ–≥–∏ web —Å–µ—Ä–≤–∏—Å–∞
	$(COMPOSE) logs -f $(WEB_SERVICE)

logs-sidekiq: ## –õ–æ–≥–∏ sidekiq —Å–µ—Ä–≤–∏—Å–∞
	$(COMPOSE) logs -f $(SIDEKIQ_SERVICE)

logs-redis: ## –õ–æ–≥–∏ Redis
	$(COMPOSE) logs -f $(REDIS_SERVICE)

# ============================================================================
# üéØ API Testing
# ============================================================================

api-test: ## –¢–µ—Å—Ç API —á–µ—Ä–µ–∑ curl
	@echo "$(BLUE)Testing API endpoints...$(NC)"
	@echo "$(YELLOW)1. Health check...$(NC)"
	@curl -s http://localhost:3000/up > /dev/null && echo "$(GREEN)‚úÖ Health OK$(NC)" || echo "$(RED)‚ùå Health FAILED$(NC)"
	@echo "$(YELLOW)2. Creating job...$(NC)"
	@job_id=$$(curl -s -X POST http://localhost:3000/complexity-score \
		-H "Content-Type: application/json" \
		-d '{"words": ["test"], "locale": "en"}' | jq -r '.job_id'); \
	echo "Job ID: $$job_id"; \
	sleep 3; \
	echo "$(YELLOW)3. Checking result...$(NC)"; \
	curl -s http://localhost:3000/complexity-score/$$job_id | jq '.'

demo: ## –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API
	@echo "$(BLUE)üé≠ API Demo$(NC)"
	@echo "$(YELLOW)Creating complexity analysis job...$(NC)"
	@job_id=$$(curl -s -X POST http://localhost:3000/complexity-score \
		-H "Content-Type: application/json" \
		-d '{"words": ["beautiful", "complex", "simple"], "locale": "en"}' | jq -r '.job_id'); \
	echo "$(GREEN)Job created: $$job_id$(NC)"; \
	echo "$(YELLOW)Waiting for processing...$(NC)"; \
	sleep 5; \
	echo "$(BLUE)Result:$(NC)"; \
	curl -s http://localhost:3000/complexity-score/$$job_id | jq '.'

# ============================================================================
# üßΩ Cleanup & Maintenance
# ============================================================================

clean: ## –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ Docker —Ä–µ—Å—É—Ä—Å—ã
	@echo "$(BLUE)Cleaning up Docker resources...$(NC)"
	docker system prune -f
	@echo "$(GREEN)‚úÖ Cleanup complete$(NC)"

clean-all: down ## –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (—É–¥–∞–ª–∏—Ç—å volumes)
	@echo "$(BLUE)Full cleanup (removing volumes)...$(NC)"
	$(COMPOSE) down -v
	docker system prune -f --volumes
	@echo "$(GREEN)‚úÖ Full cleanup complete$(NC)"

clean-build: ## –û—á–∏—Å—Ç–∏—Ç—å –∏ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑—ã
	@echo "$(BLUE)Cleaning and rebuilding...$(NC)"
	$(COMPOSE) down -v
	$(COMPOSE) build --no-cache
	@echo "$(GREEN)‚úÖ Clean build complete$(NC)"

cache-clear: ## –û—á–∏—Å—Ç–∏—Ç—å Rails –∫—ç—à
	@echo "$(BLUE)Clearing Rails cache...$(NC)"
	$(COMPOSE) exec $(WEB_SERVICE) rails cache:clear
	@echo "$(GREEN)‚úÖ Cache cleared$(NC)"

# ============================================================================
# üì¶ Dependencies
# ============================================================================

bundle-install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å gem –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "$(BLUE)Installing gems...$(NC)"
	$(COMPOSE) exec $(WEB_SERVICE) bundle install
	@echo "$(GREEN)‚úÖ Gems installed$(NC)"

bundle-update: ## –û–±–Ω–æ–≤–∏—Ç—å gem –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "$(BLUE)Updating gems...$(NC)"
	$(COMPOSE) exec $(WEB_SERVICE) bundle update
	@echo "$(GREEN)‚úÖ Gems updated$(NC)"

# ============================================================================
# üéØ Quick Commands
# ============================================================================

dev: setup up ## –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

full-test: lint test ## –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

ci: build test lint ## CI pipeline

# ============================================================================
# üìù Info & Debug
# ============================================================================

info: ## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
	@echo "$(BLUE)üìä Project Information$(NC)"
	@echo "Docker Compose version: $$($(COMPOSE) version --short)"
	@echo "Services:"
	@$(COMPOSE) config --services
	@echo ""
	@make status

routes: ## –ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã Rails
	$(COMPOSE) exec $(WEB_SERVICE) rails routes

stats: ## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Redis –∏ –∑–∞–¥–∞—á
	@echo "$(BLUE)System Statistics:$(NC)"
	@$(COMPOSE) exec $(REDIS_SERVICE) redis-cli info memory | grep used_memory_human
	@$(COMPOSE) exec $(WEB_SERVICE) rails runner "puts 'Cache keys: ' + Redis.new.keys('batch:*').count.to_s" 2>/dev/null || echo "No cache keys found" 