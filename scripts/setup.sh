#!/bin/bash

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Word Complexity API
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –∫ —Ä–∞–±–æ—Ç–µ

set -e  # –í—ã—Ö–æ–¥ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

echo "üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Word Complexity API"
echo "================================="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
command -v docker >/dev/null 2>&1 || { echo "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: https://docs.docker.com/get-docker/"; exit 1; }
command -v docker-compose >/dev/null 2>&1 || { echo "‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; exit 1; }

echo "‚úÖ Docker –∏ Docker Compose –Ω–∞–π–¥–µ–Ω—ã"

# –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è
echo ""
echo "üéõ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ö—Ä–∞–Ω–µ–Ω–∏—è:"
echo "1) Hybrid (PostgreSQL + Redis –∫—ç—à) - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è"
echo "2) Redis-Only (—Ç–æ–ª—å–∫–æ Redis) - –±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –º–µ–Ω–µ–µ –Ω–∞–¥–µ–∂–Ω–æ"
read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2) [1]: " choice
choice=${choice:-1}

if [ "$choice" = "2" ]; then
    echo "üì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis-Only —Ä–µ–∂–∏–º–∞..."
    cp .env.redis-only .env
    export REDIS_ONLY_STORAGE=true
else
    echo "üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Hybrid —Ä–µ–∂–∏–º–∞..."
    cp .env.hybrid .env
    export REDIS_ONLY_STORAGE=false
fi

echo "‚úÖ –†–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
mkdir -p logs

# –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
echo ""
echo "üê≥ –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose down -v || true  # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
docker-compose up -d

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
echo ""
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
echo "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥..."

# –ñ–¥–µ–º Redis
for i in {1..30}; do
    if redis-cli -p 6380 ping >/dev/null 2>&1; then
        echo "‚úÖ Redis –≥–æ—Ç–æ–≤"
        break
    fi
    if [ $i -eq 30 ]; then
        echo "‚ùå Redis –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
        exit 1
    fi
    sleep 1
done

# –ñ–¥–µ–º PostgreSQL
for i in {1..30}; do
    if docker-compose exec -T db pg_isready -U postgres >/dev/null 2>&1; then
        echo "‚úÖ PostgreSQL –≥–æ—Ç–æ–≤"
        break
    fi
    if [ $i -eq 30 ]; then
        echo "‚ùå PostgreSQL –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
        exit 1
    fi
    sleep 1
done

# –ñ–¥–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞..."
sleep 10

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo ""
echo "üóÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
docker-compose exec -T web rails db:create db:migrate

echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker-compose ps

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è
echo ""
echo "üéõ –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ö—Ä–∞–Ω–µ–Ω–∏—è:"
make status || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∂–∏–º"

# –¢–µ—Å—Ç API
echo ""
echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API..."
RESPONSE=$(curl -s -X POST http://localhost:3000/complexity-score \
  -H "Content-Type: application/json" \
  -d '["hello", "world"]' || echo "FAILED")

if [[ $RESPONSE == *"job_id"* ]]; then
    JOB_ID=$(echo $RESPONSE | grep -o '"job_id":"[^"]*"' | cut -d'"' -f4)
    echo "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç! Job ID: $JOB_ID"
    
    echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏..."
    sleep 5
    
    RESULT=$(curl -s -X GET "http://localhost:3000/complexity-score/$JOB_ID" || echo "FAILED")
    if [[ $RESULT == *"status"* ]]; then
        echo "‚úÖ –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
    else
        echo "‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
    fi
else
    echo "‚ùå API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ: $RESPONSE"
fi

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
echo ""
echo "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo ""
echo "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  make status      - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∂–∏–º —Ö—Ä–∞–Ω–µ–Ω–∏—è"
echo "  make test-api    - –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç API"
echo "  make logs        - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
echo "  make hybrid      - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Hybrid —Ä–µ–∂–∏–º"
echo "  make redis-only  - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Redis-Only —Ä–µ–∂–∏–º"
echo "  make cleanup     - –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏"
echo "  make help        - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã"
echo ""
echo "üåê API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:3000"
echo "üìö –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README.md"
echo "üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç: QUICKSTART.md"
echo ""
echo "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: ./scripts/test-full.sh" 